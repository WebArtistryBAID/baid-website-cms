generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model User {
  id        Int            @id
  name      String
  pinyin    String
  phone     String?
  roles     Role[]
  logs      UserAuditLog[]
  type      UserType
  gender    Gender
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  ownedEntities ContentEntity[]
  ownedImages   Image[]
}

enum Role {
  admin
  editor
  writer
}

enum UserType {
  student
  teacher
}

enum Gender {
  male
  female
  others
}

enum UserAuditLogType {
  login

  autoCreatePost

  writerCreateEntity
  writerEditEntity
  editorApproveEntity
  adminApproveEntity
  adminPublishEntity

  unpublishEntity
  deleteEntity

  uploadImage
  deleteImage
}

enum EntityType {
  post
  page
  club
  activity
  project
  course
  faculty
}

model UserAuditLog {
  id     Int              @id @default(autoincrement())
  time   DateTime         @default(now())
  type   UserAuditLogType
  user   User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  values String[]
}

model ContentEntity {
  id                    Int          @id @default(autoincrement())
  type                  EntityType
  titlePublishedEN      String?
  titlePublishedZH      String?
  titleDraftEN          String
  titleDraftZH          String
  slug                  String       @unique
  category              String?
  contentPublishedEN    String? // Markdown OR Puck data
  contentPublishedZH    String? // Markdown OR Puck data
  contentDraftEN        String // Markdown OR Puck data
  contentDraftZH        String // Markdown OR Puck data
  coverImagePublished   Image?       @relation("linkedEntitiesPub", fields: [coverImagePublishedId], references: [id], onDelete: SetNull)
  coverImagePublishedId Int?
  coverImageDraft       Image?       @relation("linkedEntitiesDraft", fields: [coverImageDraftId], references: [id], onDelete: SetNull)
  coverImageDraftId     Int?
  creatorId             Int
  creator               User         @relation(fields: [creatorId], references: [id])
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  locks                 EntityLock[]
}

model Image {
  id         Int      @id @default(autoincrement())
  sha1       String   @unique
  name       String
  altText    String
  width      Int
  height     Int
  sizeKB     Int
  uploader   User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId Int?
  createdAt  DateTime @default(now())

  linkedEntitiesDraft ContentEntity[] @relation("linkedEntitiesDraft")
  linkedEntitiesPub   ContentEntity[] @relation("linkedEntitiesPub")
}

model Approval {
  id         Int        @id @default(autoincrement())
  entityType EntityType
  entityId   Int
  role       Role
  userId     Int
  createdAt  DateTime   @default(now())

  @@unique([entityType, entityId, role, userId])
  @@index([entityType, entityId])
}

model ApprovalConfig {
  id         Int        @id @default(autoincrement())
  entityType EntityType @unique
  minEditor  Int        @default(1)
  minAdmin   Int        @default(1)
}

model EntityLock {
  id         Int           @id @default(autoincrement())
  entityType EntityType
  entityId   Int
  entity     ContentEntity @relation(fields: [entityId], references: [id], onDelete: Cascade)
  lockedBy   Int
  lockedAt   DateTime      @default(now())
  token      String

  @@unique([entityType, entityId])
  @@index([lockedBy])
}
