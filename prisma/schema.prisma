generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model User {
  id        Int            @id
  name      String
  pinyin    String
  phone     String?
  roles     Role[]
  logs      UserAuditLog[]
  type      UserType
  gender    Gender
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  ownedPages  Page[]
  ownedPosts  Post[]
  ownedImages Image[]
}

enum Role {
  admin
  editor
  writer
}

enum UserType {
  student
  teacher
}

enum Gender {
  male
  female
  others
}

enum UserAuditLogType {
  login

  autoCreatePost

  writerCreatePost
  writerEditPost
  editorApprovePost
  adminApprovePost
  adminPublishPost

  writerCreatePage
  writerEditPage
  editorApprovePage
  adminApprovePage
  adminPublishPage

  unpublishPost
  unpublishPage
  deletePost
  deletePage

  uploadImage
  deleteImage
}

enum EntityType {
  post
  page
  club
  activity
  project
}

model UserAuditLog {
  id     Int              @id @default(autoincrement())
  time   DateTime         @default(now())
  type   UserAuditLogType
  user   User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
  values String[]
}

model Page {
  id                 Int      @id @default(autoincrement())
  name               String
  // Special slugs: /posts (for posts list), /post/yyyy/MM/dd/title (for individual post)
  slug               String   @unique
  contentPublishedEN String? // Puck editor content
  contentPublishedZH String? // Puck editor content
  contentDraftEN     String // Puck editor content
  contentDraftZH     String // Puck editor content
  creatorId          Int
  creator            User     @relation(fields: [creatorId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Post {
  id                    Int      @id @default(autoincrement())
  titlePublishedEN      String?
  titlePublishedZH      String?
  titleDraftEN          String
  titleDraftZH          String
  slug                  String   @unique
  contentPublishedEN    String? // Markdown
  contentPublishedZH    String? // Markdown
  contentDraftEN        String // Markdown
  contentDraftZH        String // Markdown
  coverImagePublished   Image?   @relation("linkedPostsPub", fields: [coverImagePublishedId], references: [id], onDelete: SetNull)
  coverImagePublishedId Int?
  coverImageDraft       Image?   @relation("linkedPostsDraft", fields: [coverImageDraftId], references: [id], onDelete: SetNull)
  coverImageDraftId     Int?
  creatorId             Int
  creator               User     @relation(fields: [creatorId], references: [id])
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Image {
  id         Int      @id @default(autoincrement())
  sha1       String   @unique
  name       String
  altText    String
  width      Int
  height     Int
  sizeKB     Int
  uploader   User?    @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  uploaderId Int?
  createdAt  DateTime @default(now())

  linkedPostsDraft Post[] @relation("linkedPostsDraft")
  linkedPostsPub   Post[] @relation("linkedPostsPub")
}

model Approval {
  id         Int        @id @default(autoincrement())
  entityType EntityType
  entityId   Int
  role       Role
  userId     Int
  createdAt  DateTime   @default(now())

  @@unique([entityType, entityId, role, userId])
  @@index([entityType, entityId])
}

model ApprovalConfig {
  id         Int        @id @default(autoincrement())
  entityType EntityType @unique
  minEditor  Int        @default(1)
  minAdmin   Int        @default(1)
}

model EntityLock {
  id         Int        @id @default(autoincrement())
  entityType EntityType
  entityId   Int
  lockedBy   Int
  lockedAt   DateTime   @default(now())
  token      String

  @@unique([entityType, entityId])
  @@index([lockedBy])
}
